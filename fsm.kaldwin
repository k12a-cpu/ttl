extern node inst[16];
extern node state[3];
extern node skip;
extern node wake;

extern node a_load_n;
extern node a_store;
extern node acu_input1_sel[2];
extern node acu_input2_sel[2];
extern node acu_load_n;
extern node alu_load_n;
extern node alu_operand_sel;
extern node b_store;
extern node c_load_n;
extern node c_store;
extern node cd_load_n;
extern node cd_sel;
extern node d_load_n;
extern node d_store;
extern node inst_high_store;
extern node inst_low_store;
extern node io_load_n;
extern node io_store_n;
extern node mem_enable;
extern node mem_mode;
extern node pc_load_n;
extern node pc_store;
extern node skip_sel[2];
extern node sp_load_n;
extern node sp_store;
extern node state_next[3];

transient node a_load;
transient node acu_load;
transient node alu_load;
transient node c_load;
transient node cd_load;
transient node d_load;
transient node io_load;
transient node io_store;
transient node pc_load;
transient node sp_load;

a_load_n = ~a_load;
acu_load_n = ~acu_load;
alu_load_n = ~alu_load;
c_load_n = ~c_load;
cd_load_n = ~cd_load;
d_load_n = ~d_load;
io_load_n = ~io_load;
io_store_n = ~io_store;
pc_load_n = ~pc_load;
sp_load_n = ~sp_load;

a_load = 1'h0;
a_store = 1'h0;
acu_load = 1'h0;
alu_load = 1'h0;
b_store = 1'h0;
c_load = 1'h0;
c_store = 1'h0;
cd_load = 1'h0;
d_load = 1'h0;
d_store = 1'h0;
inst_high_store = 1'h0;
inst_low_store = 1'h0;
io_load = 1'h0;
io_store = 1'h0;
mem_enable = 1'h0;
pc_load = 1'h0;
pc_store = 1'h0;
skip_sel = 2'h0;  # SKIP_SEL_HOLD
sp_load = 1'h0;
sp_store = 1'h0;
state_next = state;

switch state {
    case 3'h0 {  # STATE_FETCH1
        if skip {
            # addr_bus = pc + 2
            acu_input1_sel = 2'h0;  # ACU_INPUT1_SEL_PC
            acu_input2_sel = 2'h2;  # ACU_INPUT2_SEL_0002
            acu_load = 1'h1;
            # pc <- addr_bus
            pc_store = 1'h1;
        } else {
            # addr_bus = pc
            pc_load = 1'h1;
        }
        # data_bus = M[addr_bus]
        mem_enable = 1'h1;
        mem_mode = 1'h0;  # MEM_MODE_READ
        # inst_high <- data_bus
        inst_high_store = 1'h1;
        # skip <- 0
        skip_sel = 2'h1;  # SKIP_SEL_0
        # go to STATE_FETCH2
        state_next = 3'h1;  # STATE_FETCH2
    }
    
    case 3'h1 {  # STATE_FETCH2
        # addr_bus = pc + 1
        acu_input1_sel = 2'h0;  # ACU_INPUT1_SEL_PC
        acu_input2_sel = 2'h1;  # ACU_INPUT2_SEL_0001
        acu_load = 1'h1;
        # pc <- addr_bus
        pc_store = 1'h1;
        # data_bus = M[addr_bus]
        mem_enable = 1'h1;
        mem_mode = 1'h0;  # MEM_MODE_READ
        # inst_low <- data_bus
        inst_low_store = 1'h1;
        # go to STATE_FETCH3
        state_next = 3'h2;  # STATE_FETCH3
    }
    
    case 3'h2 {  # STATE_FETCH3
        # addr_bus = pc + 1
        acu_input1_sel = 2'h0;  # ACU_INPUT1_SEL_PC
        acu_input2_sel = 2'h1;  # ACU_INPUT2_SEL_0001
        acu_load = 1'h1;
        # pc <- addr_bus
        pc_store = 1'h1;
        # go to STATE_EXEC
        state_next = 3'h3;  # STATE_EXEC
    }
    
    case 3'h3 {  # STATE_EXEC
        # by default, go to STATE_FETCH1
        state_next = 3'h0;  # STATE_FETCH1
        
        if inst[11] {  # mov instruction
            switch inst[13:12] {
                case 2'h0 {  # source is ALU(A, B)
                    # data_bus = ALU(a, b)
                    alu_operand_sel = 1'h0;  # ALU_OPERAND_SEL_B
                    alu_load = 1'h1;
                }
                case 2'h1 {  # source is ALU(A, IMM)
                    # data_bus = ALU(a, inst[7:0])
                    alu_operand_sel = 1'h1;  # ALU_OPERAND_SEL_INST
                    alu_load = 1'h1;
                }
                case 2'h2 {  # source is C
                    # data_bus = c
                    c_load = 1'h1;
                }
                case 2'h3 {  # source is D
                    # data_bus = d
                    d_load = 1'h1;
                }
            }
            switch inst[15:14] {
                case 2'h0 {  # dest is A
                    # a <- data_bus
                    a_store = 1'h1;
                }
                case 2'h1 {  # dest is B
                    # b <- data_bus
                    b_store = 1'h1;
                }
                case 2'h2 {  # dest is C
                    # c <- data_bus
                    cd_sel = 1'h0;  # CD_SEL_DATA_BUS
                    c_store = 1'h1;
                }
                case 2'h3 {  # dest is D
                    # d <- data_bus
                    cd_sel = 1'h0;  # CD_SEL_DATA_BUS
                    d_store = 1'h1;
                }
            }
        }
        else {  # not a mov instruction
            switch inst[15:12] {  # opcode
                case 4'h0, 4'h4 {  # inc/dec/getsp instruction
                    if inst[10] {  # getsp instruction
                        # addr_bus = sp
                        sp_load = 1'h1;
                    }
                    else {  # inc/dec instruction
                        # addr_bus = cd + 0x0001 (inc)
                        #  or
                        # addr_bus = cd + 0xFFFF (dec)
                        acu_input1_sel = 2'h1;  # ACU_INPUT1_SEL_CD
                        if inst[14] {  # dec instruction
                            acu_input2_sel = 2'h3;  # ACU_INPUT2_SEL_FFFF
                        } else {
                            acu_input2_sel = 2'h1;  # ACU_INPUT2_SEL_0001
                        }
                        acu_load = 1'h1;
                    }
                    # cd <- addr_bus
                    cd_sel = 1'h1;  # CD_SEL_ADDR_BUS
                    c_store = 1'h1;
                    d_store = 1'h1;
                }
                
                case 4'h1 {  # in/out instruction
                    if inst[10] {  # out instruction
                        # data_bus = a
                        a_load = 1'h1;
                        # IO[inst[2:0]] <- data_bus
                        io_store = 1'h1;
                    }
                    else {  # in instruction
                        # data_bus = IO[inst[2:0]]
                        io_load = 1'h1;
                        # a <- data_bus
                        a_store = 1'h1;
                    }
                }
                
                case 4'h2 {  # ld/pop instruction
                    if inst[10] {  # pop instruction
                        # addr_bus = sp
                        sp_load = 1'h1;
                        # go to STATE_POP (additional state increments SP)
                        state_next = 3'h4;  # STATE_POP
                    }
                    else {  # ld instruction
                        # addr_bus = cd
                        cd_load = 1'h1;
                    }
                    # data_bus = M[addr_bus]
                    mem_enable = 1'h1;
                    mem_mode = 1'h0;  # MEM_MODE_READ
                    # a <- data_bus
                    a_store = 1'h1;
                }
                
                case 4'h3 {  # ldd instruction
                    # addr_bus = sp + inst[10:0]
                    acu_input1_sel = 2'h2;  # ACU_INPUT1_SEL_SP
                    acu_input2_sel = 2'h0;  # ACU_INPUT2_SEL_REL_OFFSET
                    acu_load = 1'h1;
                    # data_bus = M[addr_bus]
                    mem_enable = 1'h1;
                    mem_mode = 1'h0;  # MEM_MODE_READ
                    # a <- data_bus
                    a_store = 1'h1;
                }
                
                case 4'h5 {  # addsp instruction
                    # addr_bus = sp + inst[10:0]
                    acu_input1_sel = 2'h2;  # ACU_INPUT1_SEL_SP
                    acu_input2_sel = 2'h0;  # ACU_INPUT2_SEL_REL_OFFSET
                    acu_load = 1'h1;
                    # sp <- addr_bus
                    sp_store = 1'h1;
                }
                
                case 4'h6 {  # st/push instruction
                    if inst[10] {  # push instruction
                        # addr_bus = sp - 1
                        acu_input1_sel = 2'h2;  # ACU_INPUT1_SEL_SP
                        acu_input2_sel = 2'h3;  # ACU_INPUT2_SEL_FFFF
                        acu_load = 1'h1;
                        # sp <- addr_bus
                        sp_store = 1'h1;
                    }
                    else {  # st instruction
                        # addr_bus = cd
                        cd_load = 1'h1;
                    }
                    # data_bus = a
                    a_load = 1'h1;
                    # M[addr_bus] <- data_bus
                    mem_enable = 1'h1;
                    mem_mode = 1'h1;  # MEM_MODE_WRITE
                }
                
                case 4'h7 {  # std instruction
                    # addr_bus = sp + inst[10:0]
                    acu_input1_sel = 2'h2;  # ACU_INPUT1_SEL_SP
                    acu_input2_sel = 2'h0;  # ACU_INPUT2_SEL_REL_OFFSET
                    acu_load = 1'h1;
                    # data_bus = a
                    a_load = 1'h1;
                    # M[addr_bus] <- data_bus
                    mem_enable = 1'h1;
                    mem_mode = 1'h1;  # MEM_MODE_WRITE
                }
                
                case 4'h8 {  # sk instruction
                    # compute ALU(A, B)
                    alu_operand_sel = 1'h0;  # ALU_OPERAND_SEL_B
                    # skip <- alu_condition
                    skip_sel = 2'h2;  # SKIP_SEL_CONDITION
                }
                
                case 4'h9 {  # ski instruction
                    # compute ALU(A, IMM)
                    alu_operand_sel = 1'h1;  # ALU_OPERAND_SEL_INST
                    # skip <- alu_condition
                    skip_sel = 2'h2;  # SKIP_SEL_CONDITION
                }
                
                case 4'hA {  # skn instruction
                    # compute ALU(A, B)
                    alu_operand_sel = 1'h0;  # ALU_OPERAND_SEL_B
                    # skip <- ~alu_condition
                    skip_sel = 2'h3;  # SKIP_SEL_CONDITION_N
                }
                
                case 4'hB {  # skni instruction
                    # compute ALU(A, IMM)
                    alu_operand_sel = 1'h1;  # ALU_OPERAND_SEL_INST
                    # skip <- ~alu_condition
                    skip_sel = 2'h3;  # SKIP_SEL_CONDITION_N
                }
                
                case 4'hC, 4'hD {  # rjmp/rcall instruction
                    # addr_bus = pc
                    pc_load = 1'h1;
                    # cd <- addr_bus (only if rcall)
                    cd_sel = 1'h1;  # CD_SEL_ADDR_BUS
                    c_store = inst[12];
                    d_store = inst[12];
                    # go to STATE_RJMP
                    state_next = 3'h5;  # STATE_RJMP
                }
                
                case 4'hE {  # ljmp/putsp instruction
                    # addr_bus = cd
                    cd_load = 1'h1;
                    
                    if inst[10] {  # putsp instruction
                        # sp <- addr_bus
                        sp_store = 1'h1;
                    } else {  # ljmp instruction
                        # pc <- addr_bus
                        pc_store = 1'h1;
                    }
                }
                
                case 4'hF {  # halt instruction
                    # go to STATE_HALT
                    state_next = 3'h6;  # STATE_HALT
                }
            }
        }
    }
    
    case 3'h4 {  # STATE_POP
        # addr_bus = sp + 1
        acu_input1_sel = 2'h2;  # ACU_INPUT1_SEL_SP
        acu_input2_sel = 2'h1;  # ACU_INPUT2_SEL_0001
        acu_load = 1'h1;
        # sp <- addr_bus
        sp_store = 1'h1;
        # go to STATE_FETCH1
        state_next = 3'h0;  # STATE_FETCH1
    }
    
    case 3'h5 {  # STATE_RJMP
        # addr_bus = pc + rel_offset
        acu_input1_sel = 2'h0;  # ACU_INPUT1_SEL_PC
        acu_input2_sel = 2'h0;  # ACU_INPUT2_SEL_REL_OFFSET
        acu_load = 1'h1;
        # pc <- addr_bus
        pc_store = 1'h1;
        # go to STATE_FETCH1
        state_next = 3'h0;  # STATE_FETCH1
    }
    
    case 3'h6 {  # STATE_HALT
        if (wake) {
            state_next = 3'h0;  # STATE_FETCH1
        } else {
            # do nothing and stay in halt state
            state_next = 3'h6;  # STATE_HALT
        }
    }
    
    case 3'h7 {  # undefined state
        a_load = 1'u;
        a_store = 1'u;
        acu_input1_sel = 2'u;
        acu_input2_sel = 2'u;
        acu_load = 1'u;
        alu_load = 1'u;
        alu_operand_sel = 1'u;
        b_store = 1'u;
        c_load = 1'u;
        c_store = 1'u;
        cd_load = 1'u;
        cd_sel = 1'u;
        d_load = 1'u;
        d_store = 1'u;
        inst_high_store = 1'u;
        inst_low_store = 1'u;
        io_load = 1'u;
        io_store = 1'u;
        mem_enable = 1'u;
        mem_mode = 1'u;
        pc_load = 1'u;
        pc_store = 1'u;
        skip_sel = 2'u;
        sp_load = 1'u;
        sp_store = 1'u;
        state_next = 3'u;
    }
}
